/**
 * Merge Ticketing API
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RemoteData from './RemoteData';
import TicketStatusEnum from './TicketStatusEnum';

/**
 * The Ticket model module.
 * @module model/Ticket
 * @version 1.0
 */
class Ticket {
    /**
     * Constructs a new <code>Ticket</code>.
     * # The Ticket Object ### Description The &#x60;Ticket&#x60; object is used to represent a ticket or a task within a system.  ### Usage Example TODO
     * @alias module:model/Ticket
     */
    constructor() { 
        
        Ticket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Ticket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Ticket} obj Optional instance to populate.
     * @return {module:model/Ticket} The populated <code>Ticket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Ticket();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('remote_id')) {
                obj['remote_id'] = ApiClient.convertToType(data['remote_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('assignees')) {
                obj['assignees'] = ApiClient.convertToType(data['assignees'], ['String']);
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], TicketStatusEnum);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('ticket_type')) {
                obj['ticket_type'] = ApiClient.convertToType(data['ticket_type'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], 'String');
            }
            if (data.hasOwnProperty('parent_ticket')) {
                obj['parent_ticket'] = ApiClient.convertToType(data['parent_ticket'], 'String');
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('remote_created_at')) {
                obj['remote_created_at'] = ApiClient.convertToType(data['remote_created_at'], 'Date');
            }
            if (data.hasOwnProperty('remote_updated_at')) {
                obj['remote_updated_at'] = ApiClient.convertToType(data['remote_updated_at'], 'Date');
            }
            if (data.hasOwnProperty('remote_data')) {
                obj['remote_data'] = ApiClient.convertToType(data['remote_data'], [RemoteData]);
            }
            if (data.hasOwnProperty('remote_was_deleted')) {
                obj['remote_was_deleted'] = ApiClient.convertToType(data['remote_was_deleted'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Ticket.prototype['id'] = undefined;

/**
 * The third-party API ID of the matching object.
 * @member {String} remote_id
 */
Ticket.prototype['remote_id'] = undefined;

/**
 * The ticket's name.
 * @member {String} name
 */
Ticket.prototype['name'] = undefined;

/**
 * @member {Array.<String>} assignees
 */
Ticket.prototype['assignees'] = undefined;

/**
 * The ticket's due date.
 * @member {Date} due_date
 */
Ticket.prototype['due_date'] = undefined;

/**
 * The current status of the ticket.
 * @member {module:model/TicketStatusEnum} status
 */
Ticket.prototype['status'] = undefined;

/**
 * The ticket's description.
 * @member {String} description
 */
Ticket.prototype['description'] = undefined;

/**
 * @member {String} project
 */
Ticket.prototype['project'] = undefined;

/**
 * The ticket's type.
 * @member {String} ticket_type
 */
Ticket.prototype['ticket_type'] = undefined;

/**
 * @member {String} account
 */
Ticket.prototype['account'] = undefined;

/**
 * @member {String} contact
 */
Ticket.prototype['contact'] = undefined;

/**
 * @member {String} parent_ticket
 */
Ticket.prototype['parent_ticket'] = undefined;

/**
 * @member {Array.<String>} attachments
 */
Ticket.prototype['attachments'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Ticket.prototype['tags'] = undefined;

/**
 * When the third party's ticket was created.
 * @member {Date} remote_created_at
 */
Ticket.prototype['remote_created_at'] = undefined;

/**
 * When the third party's ticket was updated.
 * @member {Date} remote_updated_at
 */
Ticket.prototype['remote_updated_at'] = undefined;

/**
 * @member {Array.<module:model/RemoteData>} remote_data
 */
Ticket.prototype['remote_data'] = undefined;

/**
 * @member {Boolean} remote_was_deleted
 */
Ticket.prototype['remote_was_deleted'] = undefined;






export default Ticket;

