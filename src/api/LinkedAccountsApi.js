/**
 * Merge Ticketing API
 * The unified API for building rich integrations with multiple Ticketing platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedAccountDetailsAndActionsList from '../model/PaginatedAccountDetailsAndActionsList';

/**
* LinkedAccounts service.
* @module api/LinkedAccountsApi
* @version 1.0
*/
export default class LinkedAccountsApi {

    /**
    * Constructs a new LinkedAccountsApi. 
    * @alias module:api/LinkedAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the linkedAccountsList operation.
     * @callback module:api/LinkedAccountsApi~linkedAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAccountDetailsAndActionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List linked accounts for your organization.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.category 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {String} opts.end_user_email_address If provided, will only return linked accounts associated with the given email address.
     * @param {String} opts.end_user_organization_name If provided, will only return linked accounts associated with the given organization name.
     * @param {String} opts.end_user_origin_id If provided, will only return linked accounts associated with the given origin ID.
     * @param {String} opts.end_user_origin_ids Comma-separated list of EndUser origin IDs, making it possible to specify multiple EndUsers at once.
     * @param {String} opts.id 
     * @param {String} opts.ids Comma-separated list of LinkedAccount IDs, making it possible to specify multiple LinkedAccounts at once.
     * @param {String} opts.integration_name If provided, will only return linked accounts associated with the given integration name.
     * @param {String} opts.is_test_account If included, will only include test linked accounts. If not included, will only include non-test linked accounts.
     * @param {Number} opts.page_size Number of results to return per page.
     * @param {String} opts.status Filter by status. Options: `COMPLETE`, `INCOMPLETE`, `RELINK_NEEDED`
     * @param {module:api/LinkedAccountsApi~linkedAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAccountDetailsAndActionsList}
     */
    linkedAccountsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'cursor': opts['cursor'],
        'end_user_email_address': opts['end_user_email_address'],
        'end_user_organization_name': opts['end_user_organization_name'],
        'end_user_origin_id': opts['end_user_origin_id'],
        'end_user_origin_ids': opts['end_user_origin_ids'],
        'id': opts['id'],
        'ids': opts['ids'],
        'integration_name': opts['integration_name'],
        'is_test_account': opts['is_test_account'],
        'page_size': opts['page_size'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAccountDetailsAndActionsList;
      return this.apiClient.callApi(
        '/linked-accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
